// Processor module with support for new instructions
// Modified to implement: lwnor, pop, beqm, baln, cmpeq, cmpli, blti

module processor_modified;
reg [31:0] pc; //32-bit program counter
reg clk; //clock
reg [7:0] datmem[0:31],mem[0:31]; //32-size data and instruction memory (8 bit(1 byte) for each location)

// Status register signals
wire zout, nout, vout; // Zero, Negative, and Overflow flags

wire [31:0] 
dataa,	//Read data 1 output of Register File
datab,	//Read data 2 output of Register File
out2,		//Output of mux with ALUSrc control-mult2
out3,		//Output of mux with MemToReg control-mult3
out4,		//Output of mux with (Branch&ALUZero) control-mult4
sum,		//ALU result
extad,	//Output of sign-extend unit
adder1out,	//Output of adder which adds PC and 4-add1
adder2out,	//Output of adder which adds PC+4 and 2 shifted sign-extend result-add2
sextad,	//Output of shift left 2 unit
zextad,     //Output of zero-extend unit (new)
mem_addr,   //Memory address for load/store (new)
branch_addr, //Branch address (new)
next_pc;    //Next PC value (new)

wire [5:0] inst31_26;	//31-26 bits of instruction
wire [4:0] 
inst25_21,	//25-21 bits of instruction
inst20_16,	//20-16 bits of instruction
inst15_11,	//15-11 bits of instruction
out1;		//Write data input of Register File

wire [15:0] inst15_0;	//15-0 bits of instruction
wire [5:0] inst5_0;     //5-0 bits of instruction (function code)
wire [4:0] inst10_6;    //10-6 bits of instruction (shift amount)

wire [31:0] instruc,	//current instruction
dpack;	//Read data output of memory (data read from memory)

wire [2:0] gout;	//Output of ALU control unit

// Original control signals
wire zout_alu,	//Zero output of ALU
pcsrc,	//Output of AND gate with Branch and ZeroOut inputs
regdest,alusrc,memtoreg,regwrite,memread,memwrite,branch,aluop1,aluop0;

// New control signals
wire jump, link, is_pop, is_lwnor, is_beqm, is_cmpeq, is_cmpli, is_blti, branch_on_n;
wire is_equal, less_than; // Comparison results
wire branch_taken; // Combined branch condition

//32-size register file (32 bit(1 word) for each register)
reg [31:0] registerfile[0:31];

integer i;

// Status register
status_register status_reg(clk, sum, zout_alu, nout, vout);

// Zero extension unit
zeroext zero_ext(inst15_0, zextad);

// Equality comparator
equality_comparator eq_comp(datab, dpack, is_equal);

// datamemory connections
always @(posedge clk)
//write data to memory
if (memwrite)
begin 
//sum stores address,datab stores the value to be written
datmem[sum[4:0]+3]=datab[7:0];
datmem[sum[4:0]+2]=datab[15:8];
datmem[sum[4:0]+1]=datab[23:16];
datmem[sum[4:0]]=datab[31:24];
end

//instruction memory
//4-byte instruction
assign instruc={mem[pc[4:0]],mem[pc[4:0]+1],mem[pc[4:0]+2],mem[pc[4:0]+3]};
assign inst31_26=instruc[31:26];
assign inst25_21=instruc[25:21];
assign inst20_16=instruc[20:16];
assign inst15_11=instruc[15:11];
assign inst15_0=instruc[15:0];
assign inst5_0=instruc[5:0];
assign inst10_6=instruc[10:6]; // Shift amount field

// registers
assign dataa=registerfile[inst25_21];//Read register 1
assign datab=registerfile[inst20_16];//Read register 2

always @(posedge clk)
begin
    // Standard register write
    if (regwrite && !is_pop && !link)
        registerfile[out1] = out3;
    
    // Pop instruction: write memory data to register and update $sp
    if (is_pop)
    begin
        registerfile[inst20_16] = dpack; // Load from memory to rt
        registerfile[29] = registerfile[29] + 4; // $sp = $sp + 4
    end
    
    // Link instruction: store return address in $31
    if (link && branch_on_n && nout)
        registerfile[31] = adder1out; // PC+4 to $31
end

// Memory address calculation for load/store/branch
assign mem_addr = (is_lwnor || is_beqm) ? dataa + {27'b0, inst10_6} : sum;

//read data from memory, mem_addr stores address
assign dpack={datmem[mem_addr[5:0]],datmem[mem_addr[5:0]+1],datmem[mem_addr[5:0]+2],datmem[mem_addr[5:0]+3]};

//multiplexers
//mux with RegDst control
mult2_to_1_5 mult1(out1, instruc[20:16], instruc[15:11], regdest);

//mux with ALUSrc control
mult2_to_1_32 mult2(out2, datab, extad, alusrc);

//mux with MemToReg control
mult2_to_1_32 mult3(out3, sum, dpack, memtoreg);

// Branch address selection
assign branch_addr = is_blti ? registerfile[inst20_16] : (is_beqm ? registerfile[inst15_11] : adder2out);

// Branch condition
assign branch_taken = (branch && zout_alu) || // beq
                     (is_beqm && is_equal) || // beqm
                     (is_blti && less_than) || // blti
                     (branch_on_n && nout);   // baln

//mux with Branch condition control
mult2_to_1_32 mult4(out4, adder1out, branch_addr, branch_taken);

// Jump address calculation (for baln)
wire [31:0] jump_addr;
assign jump_addr = {adder1out[31:28], instruc[25:0], 2'b00};

//mux with Jump control
mult2_to_1_32 mult5(next_pc, out4, jump_addr, jump && branch_on_n && nout);

// load pc
always @(negedge clk)
    pc = next_pc;

// ALU operations
// Modified ALU with NOR operation and status flags
alu32_modified alu1(sum, dataa, out2, zout_alu, nout, vout, gout);

// Less than comparison for blti
assign less_than = (dataa < extad) ? 1'b1 : 1'b0;

//adder which adds PC and 4
adder add1(pc, 32'h4, adder1out);

//adder which adds PC+4 and 2 shifted sign-extend result
adder add2(adder1out, sextad, adder2out);

//Control unit with support for new instructions
control_modified cont(instruc[31:26], regdest, alusrc, memtoreg, regwrite, memread, memwrite, branch,
                     aluop1, aluop0, jump, link, is_pop, is_lwnor, is_beqm, is_cmpeq, is_cmpli, is_blti, branch_on_n);

//Sign extend unit
signext sext(instruc[15:0], extad);

//ALU control unit with support for new instructions
alucont_modified acont(aluop1, aluop0, instruc[5], instruc[4], instruc[3], instruc[2], instruc[1], instruc[0], gout);

//Shift-left 2 unit
shift shift2(sextad, extad);

//initialize datamemory,instruction memory and registers
//read initial data from files given in hex
initial
begin
$readmemh("initDm.dat",datmem); //read Data Memory
$readmemh("initIM.dat",mem);//read Instruction Memory
$readmemh("initReg.dat",registerfile);//read Register File

	for(i=0; i<31; i=i+1)
	$display("Instruction Memory[%0d]= %h  ",i,mem[i],"Data Memory[%0d]= %h   ",i,datmem[i],
	"Register[%0d]= %h",i,registerfile[i]);
end

initial
begin
pc=0;
#400 $finish;
	
end
initial
begin
clk=0;
//40 time unit for each cycle
forever #20  clk=~clk;
end
initial 
begin
  $monitor($time,"PC %h",pc,"  SUM %h",sum,"   INST %h",instruc[31:0],
"   REGISTER %h %h %h %h ",registerfile[4],registerfile[5], registerfile[6],registerfile[1],
"   STATUS Z:%b N:%b V:%b", zout_alu, nout, vout);
end
endmodule
